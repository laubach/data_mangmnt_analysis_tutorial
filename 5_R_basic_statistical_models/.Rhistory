install.packages("sjPlot")
install.packages("sjPlot")
### 6.1 Simple linear model with a numeric response and binary predictor
# This model is also known as a t-test
## a) A view of the design matrix
model.matrix (with(tblDarting_cub_sub, ~ clan.bin -1))
### 6.1 Simple linear model with a numeric response and binary predictor
# This model is also known as a t-test
## a) A view of the design matrix
model.matrix (with(tblDarting_cub_sub, ~ clan.bin + sex -1))
View(tblDarting_cub_sub)
tblDarting_cub_sub$sex <- as.factor(as.character
(tblDarting_cub_sub$sex))
### 6.1 Simple linear model with a numeric response and binary predictor
# This model is also known as a t-test
## a) A view of the design matrix
model.matrix (with(tblDarting_cub_sub, ~ clan.bin + sex -1))
control_sex_model <- with(tblDarting_cub_sub,
lm(ht.at.shoulder ~ clan.bin + sex))
display(control_sex_model)
plot_model(control_sex_model, terms = "clan.bin")
control_sex_model <- lm(ht.at.shoulder ~ clan.bin + sex,
data = tblDarting_cub_sub)
plot_model(control_sex_model, terms = "clan.bin")
control_sex_model <- lm(ht.at.shoulder ~ clan.bin + sex,
data = tblDarting_cub_sub)
display(control_sex_model)
plot_model(control_sex_model, terms = "clan.bin")
### 6.1 Simple linear model with a numeric response and binary predictor
# This model is also known as a t-test
## a) A view of the design matrix
model.matrix (~ clan.bin + mass -1,
data = tblDarting_cub_sub)
simp_reg_model <- lm(ht.at.shoulder ~ mass,
data = tblDarting_cub_sub)
display(simp_reg_model)
summary(simp_reg_model)
coefs = as.data.frame(summary(control_sex_model)$coefficients[-1,1:2])
names(coefs)[2] = "se"
coefs$vars = rownames(coefs)
coefs$vars
names
coefs
ggplot(coefs, aes(vars, Estimate)) +
geom_hline(yintercept=0, lty=2, lwd=1, colour="grey50") +
geom_errorbar(aes(ymin=Estimate - 1.96*se, ymax=Estimate + 1.96*se),
lwd=1, colour="red", width=0) +
geom_errorbar(aes(ymin=Estimate - se, ymax=Estimate + se),
lwd=2.5, colour="blue", width=0) +
geom_point(size=4, pch=21, fill="yellow") +
theme_bw()
ggplot(coefs, aes(vars, Estimate)) +
geom_hline(yintercept=0, lty=2, lwd=1, colour="grey50") +
geom_errorbar(aes(ymin=Estimate - 1.96*se, ymax=Estimate + 1.96*se),
lwd=1, colour="grey75", width=0) +
geom_errorbar(aes(ymin=Estimate - se, ymax=Estimate + se),
lwd=2.5, colour="grey50", width=0) +
geom_point(size=4, pch=21, fill="red") +
theme_bw()
ggplot(coefs, aes(vars, Estimate)) +
geom_hline(yintercept=0, lty=2, lwd=1, colour="grey50") +
geom_errorbar(aes(ymin=Estimate - 1.96*se, ymax=Estimate + 1.96*se),
lwd=1, colour="grey75", width=0) +
geom_errorbar(aes(ymin=Estimate - se, ymax=Estimate + se),
lwd=2.5, colour="grey50", width=0) +
geom_point(size=4, pch=21, fill="red") +
labs (title = "Fully adjusted model beta estimates
for cubs and subadult hyeans ") +
ylab ("Beta estimate for shoulder height (cm)") +
xlab ("Predictor variables")
theme_bw()
ggplot(coefs, aes(vars, Estimate)) +
geom_hline(yintercept=0, lty=2, lwd=1, colour="grey50") +
geom_errorbar(aes(ymin=Estimate - 1.96*se, ymax=Estimate + 1.96*se),
lwd=1, colour="grey75", width=0) +
geom_errorbar(aes(ymin=Estimate - se, ymax=Estimate + se),
lwd=2.5, colour="grey50", width=0) +
geom_point(size=4, pch=21, fill="red") +
labs (title = "Fully adjusted model beta estimates for cubs and subadult hyeans ") +
ylab ("Beta estimate for shoulder height (cm)") +
xlab ("Predictor variables")
theme_bw()
ggplot(coefs, aes(vars, Estimate)) +
geom_hline(yintercept=0, lty=2, lwd=1, colour="grey50") +
geom_errorbar(aes(ymin=Estimate - 1.96*se, ymax=Estimate + 1.96*se),
lwd=1, colour="grey75", width=0) +
geom_errorbar(aes(ymin=Estimate - se, ymax=Estimate + se),
lwd=2.5, colour="grey50", width=0) +
geom_point(size=4, pch=21, fill="red") +
labs (title = "Fully adjusted model beta estimates Â± SE (thick grey bars) and
95% CIs (thin grey bars) for cubs and subadult hyeans") +
ylab ("Beta estimate for shoulder height (cm)") +
xlab ("Predictor variables")
theme_bw()
summary(t_test_model)
t_test_model <- lm(ht.at.shoulder ~ clan.bin, data = tblDarting_cub_sub)
t_test_model_mle <- glm(ht.at.shoulder ~ clan.bin,
family = "gaussian",
data = tblDarting_cub_sub)
display(t_test_model)
display(t_test_model_mle)
summary(t_test_model)
summary(simp_reg_model)
View(tblDarting_cub_sub)
tblDarting_cub_sub <-tblDarting_cub_sub %>%
filter(!grepl('emarti' | 'serena', age)) # use grepl
tblDarting_cub_sub <-tblDarting_cub_sub %>%
filter(!grepl('^emarti$', age)) # use grepl
## b) Remove rows where age.at.darting.days is 0
tblDarting <-tblDarting %>%
filter(!grepl('^0$', age.at.darting.days)) # use grepl
## c) Remove rows where age.at.darting.days is 0
tblDarting_cub_sub <-tblDarting %>%
filter(!grepl('^adult$', age)) # use grepl
tblDarting_cub_sub <-tblDarting_cub_sub %>%
filter(!grepl('emarti|serena', age)) # use grepl
View(tblDarting_cub_sub)
tblDarting_cub_sub <-tblDarting_cub_sub %>%
filter(!grepl('^emarti|serena$', age)) # use grepl
View(tblDarting_cub_sub)
tblDarting_cub_sub <-tblDarting_cub_sub %>%
filter(!grepl('^emarti|serena$', clan)) # use grepl
## e) Keep on rows where sex is known
tblDarting_cub_sub <-tblDarting_cub_sub %>%
filter(sex == "m" | sex == "f")
# remove ghost levels of sex variable
tblDarting_cub_sub$sex <- as.factor(as.character
(tblDarting_cub_sub$sex))
### 3.4 Add a variable to simplifly our predictor variable
## a) make a new variable of clan.bin
tblDarting_cub_sub <- mutate (tblDarting_cub_sub,
clan.bin = ifelse(tblDarting_cub_sub$clan=="talek",
"talek", "other"))
## b) conver clan.bin to factor
tblDarting_cub_sub$clan.bin <- as.factor(tblDarting_cub_sub$clan.bin)
### 6.4 A linear model with a numeric response and 3 or more level categorical
# predictor variable. This model is also known as an ANOVA.
## a) A view of the design matrix
model.matrix (~ clan -1, data = tblDarting_cub_sub)
View(tblDarting_cub_sub)
## a) Import .csv to dataframe using base R
tblDarting <- read.csv  ('./data/tblDarting.csv',
header = T)
## 2.2 Explore data frames
## a) Data frame strucure
str(tblDarting) # the structure of our data frame and class of each
# variable
###############################################################################
##############                    3. Tidy data                   ##############
###############################################################################
### 3.1 Subset data frame
## a) Subset by variables (columns)
tblDarting <- tblDarting %>%  # the same variable selection using piping
dplyr::select(id, sex, age, clan, mass, telazol.dose,
ht.at.shoulder, age.at.darting.days)
### 3.2 Create a new variable
## a) Make new variable with mutate in dplyr
# add categorical variable based on quartiles of continous mass
tblDarting <- mutate (tblDarting,
ht.shoulder.quart = ntile(ht.at.shoulder, 4))
### 3.3 Remove missing data
## a) Remove all rows that contain any NA
tblDarting <- na.omit(tblDarting) # Removes all rows with missing
# data. Be careful with this as rows of data may be removed for
# missing data that are not vital for an analysis
## b) Remove rows where age.at.darting.days is 0
tblDarting <-tblDarting %>%
filter(!grepl('^0$', age.at.darting.days)) # use grepl
## c) Remove rows where age is adult
tblDarting_cub_sub <-tblDarting %>%
filter(!grepl('^adult$', age)) # use grepl
## d) Remove rows where clan is like emarti or serena
tblDarting_cub_sub <-tblDarting_cub_sub %>%
filter(!grepl('^emarti|serena$', clan)) # use gre
View(tblDarting_cub_sub)
## d) Remove rows where clan is like emarti or serena
tblDarting_cub_sub <-tblDarting_cub_sub %>%
filter(!grepl('^emarti|serena $', clan)) # use grepl
## d) Remove rows where clan is like emarti or serena
tblDarting_cub_sub <-tblDarting_cub_sub %>%
filter(!grepl('^emarti & serena $', clan)) # use grepl
## d) Remove rows where clan is like emarti or serena
tblDarting_cub_sub <-tblDarting_cub_sub %>%
filter(!grepl('emarti|serena', clan)) # use grepl
tblDarting_cub_sub$clan <- as.factor(as.character
(tblDarting_cub_sub$clan))
# e) Keep on rows where sex is known
tblDarting_cub_sub <-tblDarting_cub_sub %>%
filter(sex == "m" | sex == "f")
# remove ghost levels of sex variable
tblDarting_cub_sub$sex <- as.factor(as.character
(tblDarting_cub_sub$sex))
### 3.4 Add a variable to simplifly our predictor variable
## a) make a new variable of clan.bin
tblDarting_cub_sub <- mutate (tblDarting_cub_sub,
clan.bin = ifelse(tblDarting_cub_sub$clan=="talek",
"talek", "other"))
## b) convert clan.bin to factor
tblDarting_cub_sub$clan.bin <- as.factor(tblDarting_cub_sub$clan.bin)
### 6.4 A linear model with a numeric response and 3 or more level categorical
# predictor variable. This model is also known as an ANOVA.
## a) A view of the design matrix
model.matrix (~ clan -1, data = tblDarting_cub_sub)
anova_model <- lm(ht.at.shoulder ~ clan,
data = tblDarting_cub_sub)
display(anova_model)
## a) A view of the design matrix
model.matrix (~ clan.bin + sex -1,
data = tblDarting_cub_sub)
## b) Linear model (note we can use lm where estimates are derived via
# Ordinary Least Squares (OLS) or glm function where estimates are
# derived from Maximum Likelihood Estimation (MLE))
control_sex_model <- lm(ht.at.shoulder ~ clan.bin + sex,
data = tblDarting_cub_sub)
display(control_sex_model)
View(tblDarting_cub_sub)
model.matrix (~ clan.bin + sex + age.at.darting.days -1,
data = tblDarting_cub_sub)
fully_adjust_model <- lm(ht.at.shoulder ~ clan.bin + sex +
age.at.darting.days,
data = tblDarting_cub_sub)
display(fully_adjust_model)
#### 7.1 Extract the beta estimates from the model
coefs = as.data.frame(summary(fully_adjust_model)$coefficients[-1,1:3])
names(coefs)[2] = "se"
coefs$vars = rownames(coefs)
#### 7.2 Plot beta estimates with ggplot2
ggplot(coefs, aes(vars, Estimate)) +
geom_hline(yintercept=0, lty=2, lwd=1, colour="grey50") +
geom_errorbar(aes(ymin=Estimate - 1.96*se, ymax=Estimate + 1.96*se),
lwd=1, colour="grey75", width=0) +
geom_errorbar(aes(ymin=Estimate - se, ymax=Estimate + se),
lwd=2.5, colour="grey50", width=0) +
geom_point(size=4, pch=21, fill="red") +
labs (title = "Fully adjusted model beta estimates Â± SE (thick grey bars) and
95% CIs (thin grey bars) for cubs and subadult hyeans") +
ylab ("Beta estimate for shoulder height (cm)") +
xlab ("Predictor variables")
theme_bw()
View(coefs)
### PURPOSE: This code aims to provide an introduction to basic linear
### models in program R. As before, we will begin by configuring our
### workspace including loading a numuber of R packages. Then we will
### import data into R and explore how to parameterize and interpret models.
### Here, and throughout we will follow the R Style Guide in order to
### improve the consistency and readability of our code.
### This tutorial is based on online, opensource resources in addition to
### some copyrighted material, all of which are cited at this scripts end.
# Code Blocks
# 1: Configure workspace
# 2: Import data
# 3: Tidy data
# 4: Data exploration and univariate analysis
# 5: Bi-variate analysis
# 6: Models
# 7: Model visualation
# 8: Resources for models in R
###############################################################################
##############              1. Configure workspace               ##############
###############################################################################
### 1.1 R Version and Session Info
R.Version()
sessionInfo()
# Developed in:
# R version 3.4.3 (2017-11-30)
# Platform: x86_64-apple-darwin15.6.0 (64-bit)
# Running under: macOS Sierra 10.12.4
### 1.2 Clear Workspace
# start with an empty workspace / environment
rm(list = ls())
### 1.3 Set working directory
# this will tell R what folder you are using, i.e. where you are storing
# data and where you will put your output
## a) MAC - setwd
setwd(paste('~/Documents/teaching/courses/',
'data_mngmnt_analysis_for_biologist/',
'5_R_basic_statistical_models',
sep = ''))
## b) PC - setwd
# setwd("c:\harddrive\users\username\desktop\5_R_basic_statistical_models")
### 1.4 Install Packages
## a) gridExtra is a package that can be used to export tables as pdf
install.packages("gridExtra")
library(gridExtra)
## b) arm is a package for regression modeling by Gelman
install.packages('arm')
library(arm)
## c) sjPlot is a graphing package
install.packages('sjPlot')
library(sjPlot)
## d) dplyr is a package for data management
install.packages('dplyr') # install package to save it locally (done once
# per computer)
library(dplyr) # load package in current R session (done everytime you
# you start a new R session)
## e) tidyverse is a bundle of packages useful for data managenment
install.packages('tidyverse')
library(tidyverse)
###############################################################################
##############                   2. Import data                  ##############
###############################################################################
### 2.1 Import Data
# As a general rule, I would suggest storing raw data as .csv or .txt
# files as opposed to Excel files, which has a tendency to re-format
# variables and is version dependent.
## a) Import .csv to dataframe using base R
tblDarting <- read.csv  ('./data/tblDarting.csv',
header = T)
## 2.2 Explore data frames
## a) Data frame strucure
str(tblDarting) # the structure of our data frame and class of each
# variable
###############################################################################
##############                    3. Tidy data                   ##############
###############################################################################
### 3.1 Subset data frame
## a) Subset by variables (columns)
tblDarting <- tblDarting %>%  # the same variable selection using piping
dplyr::select(id, sex, age, clan, mass, telazol.dose,
ht.at.shoulder, age.at.darting.days)
### 3.2 Create a new variable
## a) Make new variable with mutate in dplyr
# add categorical variable based on quartiles of continous mass
tblDarting <- mutate (tblDarting,
ht.shoulder.quart = ntile(ht.at.shoulder, 4))
### 3.3 Remove missing data
## a) Remove all rows that contain any NA
tblDarting <- na.omit(tblDarting) # Removes all rows with missing
# data. Be careful with this as rows of data may be removed for
# missing data that are not vital for an analysis
## b) Remove rows where age.at.darting.days is 0
tblDarting <-tblDarting %>%
filter(!grepl('^0$', age.at.darting.days)) # use grepl
## c) Remove rows where age is adult
tblDarting_cub_sub <-tblDarting %>%
filter(!grepl('^adult$', age)) # use grepl
## d) Remove rows where clan is like emarti or serena
tblDarting_cub_sub <-tblDarting_cub_sub %>%
filter(!grepl('emarti|serena', clan)) # use grepl
# remove ghost levels of clan variable
tblDarting_cub_sub$clan <- as.factor(as.character
(tblDarting_cub_sub$clan))
## e) Keep on rows where sex is known
tblDarting_cub_sub <-tblDarting_cub_sub %>%
filter(sex == "m" | sex == "f")
# remove ghost levels of sex variable
tblDarting_cub_sub$sex <- as.factor(as.character
(tblDarting_cub_sub$sex))
### 3.4 Add a variable to simplifly our predictor variable
## a) make a new variable of clan.bin
tblDarting_cub_sub <- mutate (tblDarting_cub_sub,
clan.bin = ifelse(tblDarting_cub_sub$clan=="talek",
"talek", "other"))
## b) convert clan.bin to factor
tblDarting_cub_sub$clan.bin <- as.factor(tblDarting_cub_sub$clan.bin)
install.packages("gridExtra")
install.packages("tidyverse")
install.packages("arm")
install.packages("sjPlot")
install.packages("dplyr")
install.packages("arm")
install.packages("tidyverse")
install.packages("dplyr")
install.packages("sjPlot")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
ggplot(data=tblDarting, aes(x=ht.at.shoulder, y = ..density..)) +
geom_histogram(breaks=seq(45, 90, by = 0.5),
col="black",
aes(fill = ..count..)) +
scale_fill_gradient("Count", low = "light green", high =
"dark blue") +
geom_density() +
xlim(c(40,90)) +
labs(title="Histogram for Hyena Shoulder Height (cm)") +
labs(x="shoulder height (cm)", y="Frequency")
## b) Use ggplot, a power graphic package in R, to make a histogram of
# of our response variable, ht.at.shoulder, now on only cubs and subs
ggplot(data=tblDarting_cub_sub, aes(x=ht.at.shoulder, y = ..density..)) +
geom_histogram(breaks=seq(45, 90, by = 0.5),
col="black",
aes(fill = ..count..)) +
scale_fill_gradient("Count", low = "light green", high =
"dark blue") +
geom_density() +
xlim(c(40,90)) +
labs(title="Histogram for Hyena Cub and Subadult Shoulder Height (cm)") +
labs(x="shoulder height (cm)", y="Frequency")
univar_shoulder_ht <- tblDarting_cub_sub %>%
summarize (N = sum(!is.na(ht.at.shoulder)),
avg = mean(ht.at.shoulder, na.rm = T),
median =  quantile(ht.at.shoulder, c(.5),
na.rm = T),
sd = sd(ht.at.shoulder, na.rm = T))
univar_shoulder_ht
bivar_sex <- tblDarting_cub_sub %>%
filter(sex == "m" | sex == "f") %>%
group_by(sex) %>%
summarize (N = sum(!is.na(ht.at.shoulder)),
avg = mean(ht.at.shoulder, na.rm = T),
median =  quantile(ht.at.shoulder, c(.5),
na.rm = T),
sd = sd(ht.at.shoulder, na.rm = T))
bivar_sex
## c) Combine bivariate stats into single table
bivar_clan <- rename(bivar_clan,  predictor = clan.bin)
bivar_sex <- rename(bivar_sex,  predictor = sex)
bivar_stats <- rbind(bivar_clan, bivar_sex)
calculate n, mean, median and standard deviation grouped by sex
bivar_clan <- tblDarting_cub_sub %>%
group_by(clan.bin) %>%
summarize (N = sum(!is.na(ht.at.shoulder)),
avg = mean(ht.at.shoulder, na.rm = T),
median =  quantile(ht.at.shoulder, c(.5),
na.rm = T),
sd = sd(ht.at.shoulder, na.rm = T))
## c) Combine bivariate stats into single table
bivar_clan <- rename(bivar_clan,  predictor = clan.bin)
bivar_sex <- rename(bivar_sex,  predictor = sex)
bivar_stats <- rbind(bivar_clan, bivar_sex)
View(bivar_stats)
### 5.2 Export to csv
# Save and export tables as a .cvs spreadsheet and named with today's
# date. Files are saved in the 'output' folder in the working directory.
## a) Set up date parameters
# print today's date
today <- Sys.Date()
date <- format(today, format="%d%b%Y")
## b) Generate File Names
# For each table that will be saved as a .csv file, first generate a
# file name to save each table
# here, we paste the folder path, followed by the file name
csv.file.name.bivar <- paste ("./output/", "bivariate_stats",
date, ".csv", sep= "")
## c) Save Tables
# Save each data frame as a .csv file (a spreadsheet/table) into the
# output data folder in the working directory.
write.csv (bivar_stats, file = csv.file.name.bivar)
### 5.2 Export data to a pdf
## a) save the data frame of summary stats out as a pdf into output file
pdf("output/bivariate_stats.pdf", height = 6, width = 7)
grid.table(bivar_stats)
dev.off()
# graph of raw data for percent global DNA methylaiton by maternal rank
ggplot(data = tblDarting_cub_sub,
aes (x = clan.bin, y = ht.at.shoulder,
color = clan.bin)) +
geom_boxplot() +
theme(text = element_text(size=20))+
scale_colour_hue(l = 50) + # Use a slightly darker palette than normal
labs (title = "Shoulder height among cubs and
subadult hyeans by clan membership") +
ylab ("shoulder height (cm)") +
xlab ("clan membership")
## d) Save Plot
# use ggsave to save the boxplot
ggsave("shoulder_by_clan_plot.pdf", plot = last_plot(), device = NULL,
path = "./output", scale = 1, width = 8,
height = 5,
units = c("in"), dpi = 300, limitsize = TRUE)
model.matrix (with(tblDarting_cub_sub, ~ clan.bin -1))
t_test_model <- lm(ht.at.shoulder ~ clan.bin, data = tblDarting_cub_sub)
t_test_model_mle <- glm(ht.at.shoulder ~ clan.bin,
family = "gaussian",
data = tblDarting_cub_sub)
display(t_test_model)
display(t_test_model_mle)
summary(t_test_model)
View(bivar_sex)
View(bivar_stats)
### 6.2 Simple linear model with a numeric response and numeric predictor
# This model is also known as a simple linear regression
## a) A view of the design matrix
model.matrix (~ mass -1,
data = tblDarting_cub_sub)
## b) Linear model
simp_reg_model <- lm(ht.at.shoulder ~ mass,
data = tblDarting_cub_sub)
summary(simp_reg_model)
### 6.5 Multiple variable linear model with a numeric response and two or
# more categorical predictor variables.
## a) A view of the design matrix
model.matrix (~ clan.bin + sex + age.at.darting.days -1,
data = tblDarting_cub_sub)
## b) Linear model (note we can use lm where estimates are derived via
# Ordinary Least Squares (OLS) or glm function where estimates are
# derived from Maximum Likelihood Estimation (MLE))
fully_adjust_model <- lm(ht.at.shoulder ~ clan.bin + sex +
age.at.darting.days,
data = tblDarting_cub_sub)
display(fully_adjust_model)
###############################################################################
##############              7. Model visualization               ##############
###############################################################################
#### 7.1 Extract the beta estimates from the model
coefs = as.data.frame(summary(fully_adjust_model)$coefficients[-1,1:3])
names(coefs)[2] = "se"
coefs$vars = rownames(coefs)
#### 7.2 Plot beta estimates with ggplot2
ggplot(coefs, aes(vars, Estimate)) +
geom_hline(yintercept=0, lty=2, lwd=1, colour="grey50") +
geom_errorbar(aes(ymin=Estimate - 1.96*se, ymax=Estimate + 1.96*se),
lwd=1, colour="grey75", width=0) +
geom_errorbar(aes(ymin=Estimate - se, ymax=Estimate + se),
lwd=2.5, colour="grey50", width=0) +
geom_point(size=4, pch=21, fill="red") +
labs (title = "Fully adjusted model beta estimates Â± SE (thick grey bars) and
95% CIs (thin grey bars) for cubs and subadult hyeans") +
ylab ("Beta estimate for shoulder height (cm)") +
xlab ("Predictor variables")
theme_bw()
