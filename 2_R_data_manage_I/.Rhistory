### PURPOSE: This code is desingned to provide an introduction to data
### data management in program R. We will begin by configuring our
### workspace including loading a numuber of R packages, which primarily
### have been developed by Hadley Wickham. Then we will import data into R
### and explore the ways in which data can be cleaned, organized and
### manipulated. Here, and throughout we will follow the R Style Guide in
### order to improve the consistency and readability of our code.
### This tutorial is based on online, opensource resources and follows
### a data management philosophy championed by Hadley Wickham.
# R for Data Science, © 2017 Garrett Grolemund and Hadley Wickham
# Code Blocks
# 1: Configure workspace
# 2: Importing data
# 3: Tidy data with tidyr
# 4: Data wrangling with dplyr
# 5: Exporting data
# 6: More useful R resources
###############################################################################
##############              1. Configure workspace               ##############
###############################################################################
### 1.1 R Version and Session Info
R.Version()
sessionInfo()
# Developed in:
# R version 3.4.3 (2017-11-30)
# Platform: x86_64-apple-darwin15.6.0 (64-bit)
# Running under: macOS Sierra 10.12.4
### 1.2 Clear Workspace
# start with an empty workspace / environment
rm(list = ls())
### 1.3 Set working directory
# this will tell R what folder you are using, i.e. where you are storing
# data and where you will put your output
## a) MAC - setwd
setwd(paste('~/Documents/teaching/courses/',
'data_mngmnt_analysis_for_biologist/2_R_data_manage_I',
sep = ''))
## b) PC - setwd
# setwd("c:\harddrive\users\username\desktop\2_R_data_manage_I")
### 1.4 Install Packages
## a) dplyr is a package for data management
install.packages('dplyr') # install package to save it locally (done once
# per computer)
library(dplyr) # load package in current R session (done everytime you
# you start a new R session)
## b) gridExtra is a package that can be used to export tables as pdf
install.packages("gridExtra")
library(gridExtra)
## c) tidyverse is a bundle of packages useful for data managenment
install.packages('tidyverse')
library(tidyverse)
###############################################################################
##############                 2. Importing data                 ##############
###############################################################################
### 2.1 Import Data
# As a general rule, I would suggest storing raw data as .csv or .txt
# files as opposed to Excel files, which has a tendency to re-format
# variables and is version dependent.
## a) Import .csv to dataframe using base R
tblDarting <- read.csv  ('./data/tblDarting.csv',
header = T)
tblHyenas <- read.csv  ('./data/tblHyenas.csv',
header = T)
## b) Import .csv to tibble (better data frame) using readr from tidyverse
tblDarting_tib <- read_csv  ('./data/tblDarting.csv', na = '')
tblHyenas_tib <- read_csv  ('./data/tblHyenas.csv',
na = '')
## 2.2 Explore data frames
## a) Data frame strucure
str(tblDarting) # the structure of our data frame and class of each
# variable
## b) View data frames
# View data entire data frame
View(tblDarting_tib)
# View first 6 rows of data frame
head(tblHyenas_tib)
# use dplyr to view data
glimpse(tblHyenas_tib)
###############################################################################
##############              3. Tidy data with tidyr              ##############
###############################################################################
### 3.1  Tidy data philosophy
# “Happy families are all alike; every unhappy family is unhappy in its
#  own way.” –– Leo Tolstoy
# “Tidy datasets are all alike, but every messy dataset is messy in its
#  own way.” –– Hadley Wickham
# Three rules of tidy data (H. Wickham):
# Each variable must have its own column.
# Each observation must have its own row.
# Each value must have its own cell.
# Rationale for tidy data (H. Wickham):
# Tidy data complements R’s vectorized operations.
# R will automatically preserve observations as you manipulate
# variables.
### 3.2 Using tidyr to make tidy data frames
## a) Create a smaller data set by subsetting tblDarting
tidy_df_test <- arrange(tblDarting_tib, id)
tidy_df_test <- tidy_df_test [2:41, c(2:4, 12:14, 17, 21:22)]
## b) a wide format data frame (40 x 16)
tidy_df_wide <- spread(tidy_df_test, clan, id)
# spread function (df, variable to split into new variable names,
# vairable containing values to poulate new variables)
# levels of a single variale are used to create multiple varialbes
## c) a long format data frame (80 x 9)
tidy_df_long <- gather(tidy_df_test, dart.variable, dart.value, 3,5)
# gather function (df, new.var.1, new.var.2, columns to combine under
# new variables)
# mulitple variables combined into single variable;
# values from observations are repeated
## d) Check your understanding of tidy data
# Has the data itself changed between these versions of tblDarting?
# Which data frame is tidy?
# Can you convert an untidy data frame back to a tidy one? Try it here.
###############################################################################
##############            4. Data wrangling with dplyr           ##############
###############################################################################
### 4.1 Indexing data frames
## a) Indexing elements from a data frame
tblDarting[2,2]  # dataframes can be indexed with square brackets
tblDarting$id[2] # dataframes can be indexed with dollar signs and
# brackets
View(tblDarting)
cous <- tblDarting["ath", ] # why doesn't this work
View(cous)
cous <- tblDarting[c("ath"), ] # why doesn't this work
View(cous)
cous <- tblDarting[c("cous", "ath"), ] # why doesn't this work
View(cous)
cous <- tblDarting[tblDarting$id = c("cous","ath"), ]
cous <- tblDarting[tblDarting$id =+ c("cous","ath"), ]
cous <- tblDarting[tblDarting$id == c("cous","ath"), ]
View(cous)
cous = ()
cous2 <- tblDarting[tblDarting$id == c("cous","ath"), ]
View(cous2)
